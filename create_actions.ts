const glob = new Bun.Glob('**/*.ts');
let files = await Array.fromAsync(glob.scan({cwd: './src/core/action/'}));
files = files.filter(file => !['action.ts', 'index.ts'].includes(file)).map(file => file.slice(0, -3));

const imports = files.map(file => `import {${file.slice(file.lastIndexOf('/') + 1)}} from './${file}';`).join('\n');
const actions = `export const actions = {${files.map(file => file.slice(file.lastIndexOf('/') + 1)).join(', ')}};`;

let get_type = `
export type Action<Context = any, Value = any, Options extends any[] = any[], Return = any> = (context: NonNullable<Context>, value: Value, ...options: Options) => Return;
export type Actions = typeof actions;
export type GetType<K extends keyof Actions, Value> =
        Actions[K] extends Action<any, Value extends unknown[] ? Value[number] : Value, any, infer Return>
            ? Return
            : Actions[K] extends Action<any, Value, any, infer Return>
                ? Return
                : `;

let indent = 20;
for (const file of files) {
    const text = await Bun.file(`./src/core/action/${file}.ts`).text();
    const generic = /export function [\w_]+<(\w+)( extends ([^>]+))?>/.exec(text);
    const type = generic?.[1];
    if (type) {
        const extend = generic[3] ?? 'unknown';

        const action_name = file.slice(file.lastIndexOf('/') + 1);
        if (file.startsWith('array/')) {
            get_type += `K extends '${action_name}' ? Value extends ${extend} ? ReturnType<typeof ${action_name}<Value>> : never`;
        } else {
            get_type += `K extends '${action_name}' ? Value extends unknown[] ? Value[number] extends ${extend} ? ReturnType<typeof ${action_name}<Value[number]>> : never : Value extends ${extend} ? ReturnType<typeof ${action_name}<Value>> : never`;
        }

        get_type += '\n' + ' '.repeat(indent) + ':';

        indent += 4;
    }
}

get_type += ' never;';

// const get_type = `export type GetType<Action extends keyof typeof actions, Value> = ReturnType<${files.map(file => `Action extends '${file}' ? typeof actions.${file}<Value>`).join(' : ')} : () => 'missing type'>;`;

await Bun.write('./src/core/action/index.ts', `// Autogenerated file! Do not edit.\n\n${imports}\n\n${actions}\n\n${get_type}\n`);
