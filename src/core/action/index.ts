// Autogenerated file! Do not edit.

import {attribute} from './attribute';
import {matches} from './matches';
import {regex} from './regex';
import {select} from './select';
import {select_first} from './select_first';
import {split} from './split';
import {text} from './text';
import {trim} from './trim';
import {value} from './value';
import {cast_float} from './cast_float';
import {cast_int} from './cast_int';
import {first} from './array/first';
import {join} from './array/join';
import {divide} from './array/divide';

export const actions = {attribute, matches, regex, select, select_first, split, text, trim, value, cast_float, cast_int, first, join, divide};

export type Action<Context = any, Value = any, Options extends any[] = any[], Return = any> = (context: NonNullable<Context>, value: Value, ...options: Options) => Return;
export type Actions = typeof actions;
export type GetOptions<K extends keyof Actions> = Actions[K] extends Action<any, any, infer Options> ? Options : [];
export type GetType<K extends keyof Actions, Value, Context> =
    K extends 'first' ? Value extends unknown[] ? ReturnType<typeof first<Value>> : never
        : Actions[K] extends Action<Context, Value extends unknown[] ? Value[number] : Value, any, infer Return>
            ? Value extends unknown[] ? Return[] : Return
            : Actions[K] extends Action<Context, Value, any, infer Return>
                ? Return
                : never;
export type PossibleActions<Context, Input> = {[K in keyof Actions as GetType<K, Input, Context> extends never ? never : K]: K};
